// Mocks generated by Mockito 5.0.2 from annotations
// in rxdart_ext/test/value/value_controller_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i2;

import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeStreamSink<S> extends _i1.Fake implements _i2.StreamSink<S> {}

/// A class which mocks [StreamController].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamController<T> extends _i1.Mock
    implements _i2.StreamController<T> {
  MockStreamController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Stream<T> get stream => (super.noSuchMethod(Invocation.getter(#stream),
      returnValue: Stream<T>.empty()) as _i2.Stream<T>);
  @override
  _i2.StreamSink<T> get sink => (super.noSuchMethod(Invocation.getter(#sink),
      returnValue: _FakeStreamSink<T>()) as _i2.StreamSink<T>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  bool get isPaused =>
      (super.noSuchMethod(Invocation.getter(#isPaused), returnValue: false)
          as bool);
  @override
  bool get hasListener =>
      (super.noSuchMethod(Invocation.getter(#hasListener), returnValue: false)
          as bool);
  @override
  _i2.Future<dynamic> get done => (super.noSuchMethod(Invocation.getter(#done),
      returnValue: Future.value(null)) as _i2.Future<dynamic>);
  @override
  void add(T? event) => super.noSuchMethod(Invocation.method(#add, [event]),
      returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i2.Future<dynamic> close() =>
      (super.noSuchMethod(Invocation.method(#close, []),
          returnValue: Future.value(null)) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> addStream(_i2.Stream<T>? source, {bool? cancelOnError}) =>
      (super.noSuchMethod(
          Invocation.method(
              #addStream, [source], {#cancelOnError: cancelOnError}),
          returnValue: Future.value(null)) as _i2.Future<dynamic>);
}
